package com.management.service;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.management.entity.TableEntity;
import com.management.exceptions.TableNotFound;
import com.management.repository.TableRepository;

@Service
@Transactional
public class TableServiceImpl implements TableService{
	
	@Autowired
	TableRepository tableRepository;
	
	@Override
	public TableEntity addTable(TableEntity tableEntity) {
		System.out.println("added a table successfully");
		return tableRepository.save(tableEntity);	
	}
	
	@Override
	public TableEntity updateTable(TableEntity tableEntity) {
	//	System.out.println("changed the table " +TableId + "successfully");
		 TableEntity table = tableRepository.save(tableEntity);
		 return table;
	}
	
	@Override
	public void deleteTable(int TableId) {
		tableRepository.deleteById(TableId);
	}
	
	@Override
	public TableEntity getTableById(int TableId) {
		return tableRepository.findById(TableId)
				.orElseThrow(() -> new TableNotFound("Table not found with the id: "+ TableId));
	}
	
	@Override
	public Page<TableEntity> getAllTables(int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        return tableRepository.findAll(pageable);
    }
	
	@Override
	public void deleteAllByCapacity(Integer capacity) {
		tableRepository.deleteAllByCapacity(capacity);
	}

	@Override
	public List<TableEntity> getAllTable() {
		return tableRepository.findAll();
	}
	
	 public List<TableEntity> getAvailableTables() {
	        return tableRepository.findByIsAvailable(true);
	    }
	
}
